// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: service.proto

package apidb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBWork_CreateTask_FullMethodName = "/db.DBWork/CreateTask"
	DBWork_DeleteTask_FullMethodName = "/db.DBWork/DeleteTask"
	DBWork_DoneTask_FullMethodName   = "/db.DBWork/DoneTask"
	DBWork_GetAllTask_FullMethodName = "/db.DBWork/GetAllTask"
)

// DBWorkClient is the client API for DBWork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBWorkClient interface {
	CreateTask(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	DeleteTask(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DoneTask(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error)
	GetAllTask(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type dBWorkClient struct {
	cc grpc.ClientConnInterface
}

func NewDBWorkClient(cc grpc.ClientConnInterface) DBWorkClient {
	return &dBWorkClient{cc}
}

func (c *dBWorkClient) CreateTask(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, DBWork_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBWorkClient) DeleteTask(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DBWork_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBWorkClient) DoneTask(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoneResponse)
	err := c.cc.Invoke(ctx, DBWork_DoneTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBWorkClient) GetAllTask(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, DBWork_GetAllTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBWorkServer is the server API for DBWork service.
// All implementations must embed UnimplementedDBWorkServer
// for forward compatibility.
type DBWorkServer interface {
	CreateTask(context.Context, *CreateRequest) (*CreateResponse, error)
	DeleteTask(context.Context, *DeleteRequest) (*DeleteResponse, error)
	DoneTask(context.Context, *DoneRequest) (*DoneResponse, error)
	GetAllTask(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedDBWorkServer()
}

// UnimplementedDBWorkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBWorkServer struct{}

func (UnimplementedDBWorkServer) CreateTask(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedDBWorkServer) DeleteTask(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedDBWorkServer) DoneTask(context.Context, *DoneRequest) (*DoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneTask not implemented")
}
func (UnimplementedDBWorkServer) GetAllTask(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTask not implemented")
}
func (UnimplementedDBWorkServer) mustEmbedUnimplementedDBWorkServer() {}
func (UnimplementedDBWorkServer) testEmbeddedByValue()                {}

// UnsafeDBWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBWorkServer will
// result in compilation errors.
type UnsafeDBWorkServer interface {
	mustEmbedUnimplementedDBWorkServer()
}

func RegisterDBWorkServer(s grpc.ServiceRegistrar, srv DBWorkServer) {
	// If the following call pancis, it indicates UnimplementedDBWorkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBWork_ServiceDesc, srv)
}

func _DBWork_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBWorkServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBWork_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBWorkServer).CreateTask(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBWork_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBWorkServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBWork_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBWorkServer).DeleteTask(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBWork_DoneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBWorkServer).DoneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBWork_DoneTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBWorkServer).DoneTask(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBWork_GetAllTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBWorkServer).GetAllTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBWork_GetAllTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBWorkServer).GetAllTask(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBWork_ServiceDesc is the grpc.ServiceDesc for DBWork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBWork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.DBWork",
	HandlerType: (*DBWorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _DBWork_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _DBWork_DeleteTask_Handler,
		},
		{
			MethodName: "DoneTask",
			Handler:    _DBWork_DoneTask_Handler,
		},
		{
			MethodName: "GetAllTask",
			Handler:    _DBWork_GetAllTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
